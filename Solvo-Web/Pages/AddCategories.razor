@page "/add-categories"
@using Microsoft.EntityFrameworkCore
@using Solvo_Core.Enums
@using Solvo_Core.Models
@using Solvo_Repository.Context
@using Solvo_Web.Data
@inject RepositoryContext context
@inject IJSRuntime JS
@inject AppState AppState
@inject NavigationManager NavManager

<h3>Kategori Yönetimi</h3>

<button class="btn btn-success mb-3" @onclick="StartAdding">Yeni Kategori Ekle</button>

@if (!AppState.IsAdmin)
{
    NavManager.NavigateTo("/error");
}
else
{
    @if (editCategory != null)
    {
        <div class="card mb-3 p-3">
            <EditForm Model="editCategory" OnValidSubmit="SaveCategory">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-2">
                    <label>Kategori Adı</label>
                    <InputText @bind-Value="editCategory.Name" class="form-control" />
                </div>

                <div class="form-check mt-2">
                    <input class="form-check-input" type="checkbox" id="durum" @bind="StatusSelect" />
                    <label class="form-check-label" for="durum">Yayınla</label>
                </div>

                <button type="submit" class="btn btn-success mt-2 me-2">Kaydet</button>
                <button type="button" class="btn btn-secondary mt-2" @onclick="CancelEdit">İptal</button>
            </EditForm>
        </div>
    }

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Adı</th>
                <th>Tarih</th>
                <th>Durum</th>
                <th>İşlemler</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in categories)
            {
                <tr>
                    <td>@category.Id</td>
                    <td>@category.Name</td>
                    <td>@category.CreateDate.ToString("dd.MM.yyyy")</td>
                    <td>
                        @if (category.Status == BaseStatus.Active)
                        {
                            <span class="badge bg-success">Aktif</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">Pasif</span>
                        }
                    </td>
                    <td>
                        <button class="btn btn-primary btn-sm me-2" @onclick="() => StartEditing(category)">Düzenle</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteCategory(category.Id)">Sil</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private List<Category> categories = new();
    private Category? editCategory;
    private bool StatusSelect;

    protected override void OnInitialized()
    {
        LoadCategories();
    }

    private void LoadCategories()
    {
        categories = context.Categories.ToList();
    }

    private void StartAdding()
    {
        editCategory = new Category();
        StatusSelect = false;
    }

    private void StartEditing(Category category)
    {
        editCategory = new Category
            {
                Id = category.Id,
                Name = category.Name,
                Status = category.Status
            };
        StatusSelect = category.Status == BaseStatus.Active;
    }

    private void CancelEdit()
    {
        editCategory = null;
    }

    private void SaveCategory()
    {
        if (editCategory == null) return;

        editCategory.Status = StatusSelect ? BaseStatus.Active : BaseStatus.Passive;

        if (editCategory.Id == 0)
        {
            editCategory.CreateDate = DateTime.Now;
            context.Categories.Add(editCategory);
        }
        else
        {
            var existing = context.Categories.Find(editCategory.Id);
            if (existing != null)
            {
                existing.Name = editCategory.Name;
                existing.Status = editCategory.Status;
            }
        }

        context.SaveChanges();
        LoadCategories();
        editCategory = null;
    }

    private async Task DeleteCategory(int id)
    {
        var confirmed = await JS.InvokeAsync<bool>("showDeleteConfirm");

        if (confirmed)
        {
            var cat = context.Categories.Find(id);
            if (cat != null)
            {
                context.Categories.Remove(cat);
                context.SaveChanges();
                LoadCategories();
            }
        }
    }
}
