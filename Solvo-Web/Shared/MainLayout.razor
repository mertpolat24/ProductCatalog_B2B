@using Microsoft.AspNetCore.WebUtilities
@using Solvo_Core.Models
@using Solvo_Web.Data
@using Solvo_Web.Pages
@using static Solvo_Web.Shared.NavMenu
@inject AppState AppState
@inject IJSRuntime JS
@inherits LayoutComponentBase
@inject NavigationManager NavManager


<div id="wrapper">
    @if (showSidebar)
    {
        <ul class="navbar-nav bg-gradient-primary sidebar sidebar-dark accordion" id="accordionSidebar">

            <hr class="sidebar-divider my-0" />

            <div class="sidebar-heading text-white">
                SolvoB2B
            </div>

            <li class="nav-item active">
                <a class="nav-link" href="/">
                    <i class="fas fa-fw fa-tachometer-alt"></i>
                    <span>Ana Menü</span>
                </a>
            </li>
            <li class="nav-item active">
                <a class="nav-link" href="/AllProducts">
                    <i class="fas fa-boxes"></i>
                    <span>Tüm Ürünler</span>
                </a>
            </li>


            @if (AppState.IsAdmin == false)
            {
                <li class="nav-item">
                    <NavLink class="nav-link" href="/login" Match="NavLinkMatch.All">
                        <i class="fas fa-fw fa-sign-in-alt"></i>
                        <span>Giriş Yap</span>
                    </NavLink>
                </li>
            }
            @if (AppState.IsAdmin)
            {

                <li class="nav-item">
                    <a class="nav-link" href="/admin-products">
                        <i class="fas fa-fw fa-box"></i>
                        <span>Ürün İşlemleri</span>
                    </a>
                </li>

                <li class="nav-item">
                    <a class="nav-link" href="/add-categories">
                        <i class="fas fa-fw fa-th-large"></i>
                        <span>Kategori İşlemleri</span>
                    </a>
                </li>

                <li class="nav-item">
                    <a class="nav-link" href="/add-brands">
                        <i class="fas fa-fw fa-tags"></i>
                        <span>Marka İşlemleri</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/CreateAccount">
                        <i class="fas fa-user-plus"></i>  
                        <span>Yeni Yönetici Oluştur</span>
                    </a>
                </li>


                <li class="nav-item">
                    <button @onclick="Logout" class="nav-link btn btn-link text-start text-white">
                        <i class="fas fa-fw fa-sign-out-alt"></i>
                        <span>Çıkış Yap</span>
                    </button>
                </li>
            }

        </ul>

    }
    <div id="content-wrapper" class="d-flex flex-column">

        <div id="content">
            <_TopBar />
            <div class="container-fluid">
                @Body
            </div>

        </div>
        <_Footer />
    </div>
</div>
<a class="scroll-to-top rounded" href="#page-top">
    <i class="fas fa-angle-up"></i>
</a>





@code {
    private FilterModel Filters = new();
    private bool ShowFilters = false;
    private bool showSidebar = true;

    private void OnFilterChanged(ChangeEventArgs e)
    {
        StateHasChanged();
        AppState.LayoutActive = true;
    }
    protected override void OnInitialized()
    {
        NavManager.LocationChanged += OnLocationChanged;
        UpdateSidebarVisibility();
    }


    private void OnLocationChanged(object sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        UpdateSidebarVisibility();
        StateHasChanged();
    }

    private void UpdateSidebarVisibility()
    {
        var uri = NavManager.ToBaseRelativePath(NavManager.Uri).ToLower();
        showSidebar = uri != "login";
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= OnLocationChanged;
    }
    async Task Logout()
    {
        var confirmed = await JS.InvokeAsync<bool>("showLogoutConfirm");

        if (confirmed)
        {
            AppState.IsAdmin = false;
            AppState.PageActive = true;
            NavManager.NavigateTo("/");
        }
    }
}
