@page "/admin-products"
@using Microsoft.EntityFrameworkCore
@using Solvo_Core.Enums
@using Solvo_Core.Models
@using Solvo_Web.Data
@inject Solvo_Repository.Context.RepositoryContext DbContext
@inject NavigationManager NavManager
@inject AppState AppState
@inject IJSRuntime JS

<style>
    .form-select {
        display: block;
        width: 100%;
        padding: 0.375rem 2.25rem 0.375rem 0.75rem;
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.5;
        color: #212529;
        background-color: #fff;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right 0.75rem center;
        background-size: 16px 12px;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
        appearance: none;
    }

        .form-select:focus {
            border-color: #86b7fe;
            outline: 0;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }
</style>

<h3 class="mb-4">Ürün Yönetimi</h3>
@if (!string.IsNullOrEmpty(AppState.LastMessage))
{
    var cssClass = AppState.LastMessageType == "success" ? "alert alert-success" : "alert alert-danger";
    <div class="@cssClass">@AppState.LastMessage</div>
    AppState.LastMessage = null;
    AppState.LastMessageType = null;
}
<a href="/add-product" class="btn btn-success mb-3">Yeni Ürün Ekle</a>

@if (!AppState.IsAdmin)
{
    NavManager.NavigateTo("/error", true);
}
else
{
    <table class="table table-striped table-bordered">
        <thead class="table-primary">
            <tr>
                <th>ID</th>
                <th>Adı</th>
                <th>Açıklama</th>
                <th>Görsel</th>
                <th>Fiyat</th>
                <th>Stok</th>
                <th>Kategori</th>
                <th>Marka</th>
                <th>Durum</th>
                <th>Oluşturma</th>
                <th>İşlemler</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>@product.ImagePath</td>
                    <td>@product.Price.ToString()₺</td>
                    <td>@product.Stock</td>
                    <td>@product.Category?.Name</td>
                    <td>@product.Brand?.Name</td>
                    <td>
                        @if (product.Status == BaseStatus.Active)
                        {
                            <span class="badge bg-success">Aktif</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">Pasif</span>
                        }
                    </td>
                    <td>@product.CreateDate.ToString("R")</td>
                    <td>
                        <button class="btn btn-primary btn-sm me-2" @onclick="() => StartEditing(product)">Düzenle</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(product.Id)">Sil</button>
                    </td>
                </tr>

                @if (editProduct != null && editProduct.Id == product.Id)
                {
                    <tr>
                        <td colspan="11">
                            <EditForm Model="editProduct" OnValidSubmit="UpdateProduct">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="row g-3">

                                    <div class="col-md-6">
                                        <label class="form-label">Ürün Adı</label>
                                        <InputText class="form-control" @bind-Value="editProduct.Name" />
                                    </div>

                                    <div class="col-md-6">
                                        <label class="form-label">Açıklama</label>
                                        <InputText class="form-control" @bind-Value="editProduct.Description" />
                                    </div>

                                    <div class="col-md-6">
                                        <label class="form-label">Kategori</label>
                                        <select class="form-select" @bind="editProduct.CategoryId">
                                            <option value="">Kategori Seç</option>
                                            @foreach (var cat in categories)
                                            {
                                                <option value="@cat.Id">@cat.Name</option>
                                            }
                                        </select>
                                    </div>

                                    <div class="col-md-6">
                                        <label class="form-label">Marka</label>
                                        <select class="form-select" @bind="editProduct.BrandId">
                                            <option value="">Marka Seç</option>
                                            @foreach (var br in brands)
                                            {
                                                <option value="@br.Id">@br.Name</option>
                                            }
                                        </select>
                                    </div>

                                    <div class="col-md-6">
                                        <label class="form-label">Görsel Seç</label>
                                        <InputFile OnChange="OnInputFileChange" class="form-control" />
                                        @if (!string.IsNullOrEmpty(editProduct.ImagePath))
                                        {
                                            <div class="mt-2">
                                                <img src="@("/" + editProduct.ImagePath)" alt="Ürün Görseli" width="150" />
                                            </div>
                                        }
                                    </div>

                                    <div class="col-md-3">
                                        <label class="form-label">Fiyat</label>
                                        <InputNumber class="form-control" @bind-Value="editProduct.Price" />
                                    </div>

                                    <div class="col-md-3">
                                        <label class="form-label">Stok</label>
                                        <InputNumber class="form-control" @bind-Value="editProduct.Stock" />
                                    </div>

                                    <div class="col-md-12">
                                        <div class="form-check mt-3">
                                            <input type="checkbox" class="form-check-input" id="durumCheck" @bind="editStatus" />
                                            <label class="form-check-label" for="durumCheck">Yayınla</label>
                                        </div>
                                    </div>

                                    <div class="col-md-12 d-flex justify-content-end mt-3">
                                        <button type="submit" class="btn btn-success me-2">Kaydet</button>
                                        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">İptal</button>
                                    </div>

                                </div>
                            </EditForm>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private List<Product> products = new();
    private Product? editProduct;
    private List<Category> categories = new();
    private List<Brand> brands = new();
    private bool editStatus;

    protected override void OnInitialized()
    {
        LoadProducts();
        categories = DbContext.Categories.ToList();
        brands = DbContext.Brands.ToList();
    }

    private void LoadProducts()
    {
        products = DbContext.Products
            .Include(p => p.Category)
            .Include(p => p.Brand)
            .ToList();
    }

    private void StartEditing(Product product)
    {
        editProduct = new Product
            {
                Id = product.Id,
                Name = product.Name,
                Description = product.Description,
                Price = product.Price,
                Stock = product.Stock,
                ImagePath = product.ImagePath,
                CategoryId = product.CategoryId,
                BrandId = product.BrandId,
                CreateDate = product.CreateDate,
                Status = product.Status
            };

        editStatus = product.Status == BaseStatus.Active;
    }

    private void CancelEdit()
    {
        editProduct = null;
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var uploadsFolder = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "images");

        if (!Directory.Exists(uploadsFolder))
            Directory.CreateDirectory(uploadsFolder);

        var uniqueFileName = $"{Guid.NewGuid()}_{file.Name}";
        var filePath = Path.Combine(uploadsFolder, uniqueFileName);

        using var stream = new FileStream(filePath, FileMode.Create);
        await file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(stream);

        editProduct.ImagePath = $"images/{uniqueFileName}";
    }

    private void UpdateProduct()
    {
        var productToUpdate = DbContext.Products.FirstOrDefault(p => p.Id == editProduct.Id);
        if (productToUpdate is not null)
        {
            productToUpdate.Name = editProduct.Name;
            productToUpdate.Description = editProduct.Description;
            productToUpdate.Price = editProduct.Price;
            productToUpdate.Stock = editProduct.Stock;
            productToUpdate.ImagePath = editProduct.ImagePath;
            productToUpdate.CategoryId = editProduct.CategoryId;
            productToUpdate.BrandId = editProduct.BrandId;
            productToUpdate.Status = editStatus ? BaseStatus.Active : BaseStatus.Passive;

            DbContext.SaveChanges();
            AppState.LastMessage = "Ürün başarıyla güncellendi!";
            AppState.LastMessageType = "success";

            editProduct = null;
            LoadProducts();
        }
        else
        {
            AppState.LastMessage = "Ürün güncellenirken bir hata oluştu!";
            AppState.LastMessageType = "error";
        }
    }


    private async Task ConfirmDelete(int id)
    {
        var confirmed = await JS.InvokeAsync<bool>("showDeleteConfirm");

        if (confirmed)
        {
            var product = DbContext.Products.Find(id);
            if (product != null)
            {
                DbContext.Products.Remove(product);
                DbContext.SaveChanges();

                AppState.LastMessage = "Ürün başarıyla silindi!";
                AppState.LastMessageType = "success";

                LoadProducts();
            }
            else
            {
                AppState.LastMessage = "Ürün silinirken hata oluştu!";
                AppState.LastMessageType = "error";
            }
        }
    }
}