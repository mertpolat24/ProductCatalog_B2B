@page "/"
@inject IProductService ProductService
@using Solvo_Core.Abstract
@using Solvo_Core.Models
@using Solvo_Service.Contracts
@using static Solvo_Web.Shared.NavMenu
@inject NavigationManager NavManager


<h1 class="h3 mb-4 text-gray-800">Ürün Listesi</h1>

<button class="btn btn-outline-primary mb-3" @onclick="ToggleView">
    @(IsCardView ? "Liste Görünümüne Geç" : "Kart Görünümüne Geç")
</button>
@if (IsCardView)
{
    <div class="row">
        @foreach (var product in FilteredProducts)
        {
            <div class="col-md-4 mb-4">
                <div class="card shadow h-100">
                    <div class="card-body">
                        <img src="@product.ImagePath" alt="Test Resim" style="width:200px;" />
                        <h5 class="card-title">@product.Name</h5>
                        <p class="card-text">@product.Description</p>
                        <span class="badge bg-info">@product.Category?.Name</span>
                        <span class="badge bg-secondary">@product.Brand?.Name</span>
                        <p class="mt-2"><b>Fiyat:</b> @product.Price ₺</p>
                        <p><b>Stok:</b> @product.Stock</p>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th>Id</th>
                <th>İsim</th>
                <th>Marka</th>
                <th>Kategori</th>
                <th>Fiyat</th>
                <th>Stok</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in FilteredProducts)
            {
                <tr>
                    <td>@p.Id</td>
                    <td>@p.Name</td>
                    <td>@p.Brand?.Name</td>
                    <td>@p.Category?.Name</td>
                    <td>@p.Price ₺</td>
                    <td>@p.Stock</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Product> AllProducts = new();
    private List<Product> FilteredProducts = new();

    private bool IsCardView = false;

    [CascadingParameter]
    private FilterModel Filters { get; set; }

    protected override void OnInitialized()
    {
        AllProducts = ProductService.GetAllProduct().ToList();
        FilteredProducts = AllProducts;


    }
    protected override void OnParametersSet()
    {
        ApplyFilters();
    }

    private void ToggleView()
    {
        IsCardView = !IsCardView;
    }

    public void ApplyFilters()
    {
        FilteredProducts = AllProducts
                .Where(p =>
                    (string.IsNullOrEmpty(Filters.Category) || (p.Category?.Name == Filters.Category)) &&
                    (string.IsNullOrEmpty(Filters.Brand) || (p.Brand?.Name == Filters.Brand)) &&
                    (!Filters.MinPrice.HasValue || p.Price >= Filters.MinPrice) &&
                    (!Filters.MaxPrice.HasValue || p.Price <= Filters.MaxPrice) &&
                    (!Filters.OnlyInStock || p.Stock > 0)
                )
                .ToList();

    }
}
