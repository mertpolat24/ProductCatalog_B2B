@page "/CreateAccount"
@using Solvo_Core.Enums
@using Solvo_Core.Models
@using Solvo_Service.Contracts
@using System.ComponentModel.DataAnnotations
@using Solvo_Web.Data
@inject IUserService UserService
@inject NavigationManager NavManager
@inject AppState AppState


<h3>Yönetici Oluştur</h3>
@if (!string.IsNullOrEmpty(AppState.LastMessage))
{
    var cssClass = AppState.LastMessageType == "success" ? "alert alert-success" :
                   AppState.LastMessageType == "error" ? "alert alert-danger" :
                   "alert alert-info";

    <div class="@cssClass mt-3">@AppState.LastMessage</div>

    AppState.LastMessage = null;
    AppState.LastMessageType = null;
}
@if (!AppState.IsAdmin)
{
    NavManager.NavigateTo("/error",true);
}
else
{
    <div class="w-50">
        <EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label for="email">E-posta</label>
                <InputText id="email" type="email" class="form-control" @bind-Value="registerModel.Email" />
            </div>

            <div class="mb-3">
                <label for="password">Şifre</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" />
            </div>

            <button type="submit" class="btn btn-success">Oluştur</button>
        </EditForm>
    </div>
}

@code {
    private RegisterModel registerModel = new RegisterModel();
    protected override async Task OnInitializedAsync()
    {
        if (AppState.IsAdmin == false)
        {
            await InvokeAsync(() => NavManager.NavigateTo("/error", true));
        }
    }
    private async Task HandleRegister()
    {
        if (UserService.IsEmailTaken(registerModel.Email))
        {
            AppState.LastMessage = "Bu e-posta zaten kayıtlı.";
            AppState.LastMessageType = "error";
            return;
        }

        var user = new User
            {
                Email = registerModel.Email,
                PasswordHash = ComputeSha256Hash(registerModel.Password),
                CreateDate = DateTime.Now,
            };

        UserService.Create(user);

        AppState.LastMessage = "Yönetici hesabı başarıyla oluşturuldu!";
        AppState.LastMessageType = "success";
        await Task.Delay(3000);
        NavManager.NavigateTo("/login", true);
    }


    public string ComputeSha256Hash(string rawData)
    {
        using var sha256 = System.Security.Cryptography.SHA256.Create();
        byte[] bytes = sha256.ComputeHash(System.Text.Encoding.UTF8.GetBytes(rawData));
        return Convert.ToHexString(bytes);
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "E-posta gerekli")]
        [EmailAddress(ErrorMessage = "Geçerli bir e-posta girin")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Şifre gerekli")]
        [MinLength(6, ErrorMessage = "Şifre en az 6 karakter olmalı")]
        public string Password { get; set; } = string.Empty;
    }
}
